import React from 'react';
import sinon from 'sinon';
import { mount } from 'enzyme';
import renderer from 'react-test-renderer';
import configureStore from 'redux-mock-store';
import { FormWithConstraints } from 'react-form-with-constraints';
import { Col, Row, Label, Input, Button, FormGroup } from 'reactstrap';

import ErrorMessage from '../src/assets/js/components/common/ErrorMessage';

import EmailField from '../src/assets/js/components/fields/EmailField';
import PasswordField from '../src/assets/js/components/fields/PasswordField';

import Login from '../src/assets/js/components/views/Login';

describe('Login Component', () => {
	let store;

	let wrapper;

	let mockStore;

	const middlewares = [];

	const initialState = {};

	beforeEach(() => {
		mockStore = configureStore(middlewares);

		store = mockStore(initialState);

		wrapper = mount(<Login store={store} />);
	});

	it('should render without crashing', () => expect(wrapper.length).toEqual(1));

	it('should have "login-page-container" class selector', () => expect(wrapper.find('.login-page-container').length).toEqual(2));

	it('should have an email field', () => expect(wrapper.find('input[name="email"]').length).toEqual(1));

	it('should have an password field', () => expect(wrapper.find('input[name="password"]').length).toEqual(1));

	it('should have an forgotten your password link', () => expect(wrapper.find('a[href="/forgotten-your-password"]').length).toEqual(1));

	it('should have an submit button', () => expect(wrapper.find('button[type="submit"]').length).toEqual(1));

	it('should render a <FormWithConstraints /> component', () => expect(wrapper.find('FormWithConstraints').length).toEqual(1));

	it('should render a <Row /> component', () => expect(wrapper.find(Row).length).toEqual(1));

	it('should render a <Col /> component', () => expect(wrapper.find(Col).length).toEqual(2));

	it('should render a <Label /> component', () => expect(wrapper.find(Label).length).toEqual(2));

	it('should render a <Input /> component', () => expect(wrapper.find(Input).length).toEqual(2));

	it('should render a <Button /> component', () => expect(wrapper.find(Button).length).toEqual(2));

	it('should render a <FormGroup /> component', () => expect(wrapper.find(FormGroup).length).toEqual(2));

	it('should render a <EmailField /> component', () => expect(wrapper.find(EmailField).length).toEqual(1));

	it('should render a <PasswordField /> component', () => expect(wrapper.find(PasswordField).length).toEqual(1));

	it('should allow us to set props on <EmailField /> component', () => {
		const wrapper = mount(<FormWithConstraints><EmailField fieldValue="hello@giggrafter.com" /></FormWithConstraints>);

		expect(wrapper.props().children.props.fieldValue).toEqual('hello@giggrafter.com');
	});

	it('should allow us to simulate an onChange event on <EmailField /> component', () => {
		const handleChange = sinon.spy();

		const wrapper = mount(<FormWithConstraints><EmailField handleChange={handleChange} /></FormWithConstraints>);

		wrapper.find('input[name="email"]').simulate('change');

		expect(handleChange.calledOnce).toEqual(true);
	});

	it('should allow us to simulate an onSubmit event on <FormWithConstraints /> component', () => {
		const handleSubmit = sinon.spy();

		const wrapper = mount(<FormWithConstraints onSubmit={handleSubmit} />);

		wrapper.find('form').simulate('submit');

		expect(handleSubmit.calledOnce).toEqual(true);
	});
});
